name: CodeQL-Analysis

on:
  workflow_call:

jobs:
  identify-languages:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.list-languages.outputs.languages }}
    steps:
      - uses: austenstone/list-repository-languages@main
        id: list-languages
        with:
          codeql: 'true'

  run-codeql:
    needs: identify-languages
    runs-on: ubuntu-latest
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      matrix:
        language: ${{ fromJSON(needs.identify-languages.outputs.languages) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        id: run-codeql
        uses: github/codeql-action/analyze@v3
        with:
          category: ${{ matrix.language }}

      - name: Download Analysis Results
        run: |
          mkdir -p codeql-results
          cp ${{ steps.run-codeql.outputs.sarif }} codeql-results/results.sarif

      - name: Compute Vulnerability Score
        id: compute-score
        run: |
          # Parse the SARIF file to extract vulnerabilities
          results_path="codeql-results/results.sarif"
          
          critical=$(jq '[.runs[].results[] | select(.level == "error") | select(.properties.tags[] == "security") | select(.properties.severity == "critical")] | length' $results_path)
          high=$(jq '[.runs[].results[] | select(.level == "error") | select(.properties.tags[] == "security") | select(.properties.severity == "high")] | length' $results_path)
          medium=$(jq '[.runs[].results[] | select(.level == "warning") | select(.properties.tags[] == "security") | select(.properties.severity == "medium")] | length' $results_path)
          low=$(jq '[.runs[].results[] | select(.level == "note") | select(.properties.tags[] == "security") | select(.properties.severity == "low")] | length' $results_path)

          # Assign weights to each severity level
          critical_weight=10
          high_weight=7
          medium_weight=5
          low_weight=2

          # Compute the total vulnerability score
          vulnerability_score=$((critical * critical_weight + high * high_weight + medium * medium_weight + low * low_weight))

          echo "Critical: $critical"
          echo "High: $high"
          echo "Medium: $medium"
          echo "Low: $low"
          echo "Vulnerability Score: $vulnerability_score"

          echo "::set-output name=vulnerability-score::$vulnerability_score"

      - name: Check Threshold and Block Pipeline
        if: ${{ steps.compute-score.outputs.vulnerability-score }} >= 50  # Example threshold
        run: |
          echo "Vulnerability score is too high. Blocking pipeline."
          exit 1  # This will cause the pipeline to fail

      - name: Proceed with Deployment
        if: ${{ steps.compute-score.outputs.vulnerability-score }} < 50
        run: |
          echo "Vulnerability score is acceptable. Proceeding with deployment."