name: CodeQL-Analysis

on:
  workflow_call:
    inputs:
      config-file:
        required: false
        type: string
        description: "The path to the CodeQL configuration file"
      languages:
        required: true
        type: string
        description: "A comma-seperated list of languages to analyze"
    outputs:
      score:
        description: "Total score"
        value: ${{ jobs.run-codeql.outputs.score }}
jobs:
  get-languages:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.set-languages.outputs.languages-json }}
    steps:
      - name: Set Languages
        id: set-languages
        run: |
          languages_json=$(echo "${{ inputs.languages }}" | awk '{$1=$1};1' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "languages-json=$languages_json" >> $GITHUB_OUTPUT
  run-codeql:
    needs: get-languages
    runs-on: ${{ (matrix.language == 'swift' && fromJSON('[ "ubuntu-latest", "macOS" ]')) || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    outputs:
      score: ${{ steps.parse-sarif.outputs.score }}
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJson(needs.get-languages.outputs.languages) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ${{ inputs.config-file }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        id: run-codeql
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          output: sarif

      - name: Parse SARIF and Compute Vulnerability Score
        id: parse-sarif
        run: |
          results_path=$(echo ${{ steps.run-codeql.outputs.sarif }} | jq -r '.["results.sarif"]')
          
          # Parse the SARIF file to extract vulnerabilities and count based on severity levels
          critical=$(jq '[.runs[].results[] | select(.properties["security-severity"] >= 9)] | length' $results_path)
          high=$(jq '[.runs[].results[] | select(.properties["security-severity"] >= 7 and .properties["security-severity"] < 9)] | length' $results_path)
          medium=$(jq '[.runs[].results[] | select(.properties["security-severity"] >= 4 and .properties["security-severity"] < 7)] | length' $results_path)
          low=$(jq '[.runs[].results[] | select(.properties["security-severity"] >= 0.1 and .properties["security-severity"] < 4)] | length' $results_path)

          # Calculate the vulnerability score
          base_score=100
          score=$((base_score - (critical * 5) - (high * 4) - (medium * 3) - (low * 2)))

          echo "Vulnerability Score: $score"

          # Using $GITHUB_OUTPUT to set outputs
          echo "score=$score" >> $GITHUB_OUTPUT

          # Generate Markdown table
          echo "## CodeQL Vulnerability Score" >> $GITHUB_STEP_SUMMARY
          echo "| **Score** | **$score** |" >> $GITHUB_STEP_SUMMARY
